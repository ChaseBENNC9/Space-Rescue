name: Create Build and Release

on:
  push:
    branches:
      - main
jobs:
  release-project:
    name: Release Project
    runs-on: ubuntu-latest
    needs: build
    steps: 
      - uses: actions/download-artifact@v3
        id: download
        with:
          path: build
      - name: echo
        run: echo ${{steps.download.outputs.download-path}}

      - name: ZIP Build
        id: zip-release
        uses: thedoctor0/zip-release@master
        with: 
          type: zip
          filename: build.zip
          path: ${{steps.download.outputs.download-path}}
          directory: ${{steps.download.outputs.download-path}}
          
      - name: List contents of the directory
        run: ls ${{ steps.download.outputs.download-path }}

      - uses: actions/checkout@v2
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.REPO_TOKEN }}
      - name: Create a GitHub release
        id: new_release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.REPO_TOKEN }}
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
      - name: Upload to Github Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        with:
          upload_url: ${{ steps.new_release.outputs.upload_url}}
          asset_path:  ${{steps.download.outputs.download-path}}/build.zip
          asset_name: build-${{ steps.tag_version.outputs.new_tag}}.zip
          asset_content_type: application/zip
  build:
    name: Build my project âœ¨
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          lfs: true

      # Cache
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      # Build
      - name: Build project
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: StandaloneWindows
          allowDirtyBuild: true

      # Output
      - uses: actions/upload-artifact@v3
        with:
          name: build
          path: build
